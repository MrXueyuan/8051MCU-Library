C51 COMPILER V9.57.0.0   LCD1602B                                                          05/28/2018 01:37:37 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE LCD1602B
OBJECT MODULE PLACED IN .\Objects\LCD1602B.obj
COMPILER INVOKED BY: E:\STCMCU\Keil-v5\C51\BIN\C51.EXE LCD1602B.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listings\L
                    -CD1602B.lst) TABS(2) OBJECT(.\Objects\LCD1602B.obj)

line level    source

   1          
   2          #include  "config.h"
   3          #include  "delay.h"
   4          
   5          #define LineLenth 16    //16x2
   6          
   7          //this programme is used for LCD module 16x2 20x2 or 40x2.
   8          
   9          /*************  Pin define  *****************************************************/
  10          
  11          sfr   LCD_BUS = 0x80; //P0--0x80, P1--0x90, P2--0xA0, P3--0xB0
  12          
  13          sbit  LCD_B7  = LCD_BUS^7;  //D7 -- Pin 14    LED- -- Pin 16 
  14          sbit  LCD_B6  = LCD_BUS^6;  //D6 -- Pin 13    LED+ -- Pin 15
  15          sbit  LCD_B5  = LCD_BUS^5;  //D5 -- Pin 12    Vo   -- Pin 3
  16          sbit  LCD_B4  = LCD_BUS^4;  //D4 -- Pin 11    VDD  -- Pin 2
  17          sbit  LCD_B3  = LCD_BUS^3;  //D3 -- Pin 10    VSS  -- Pin 1
  18          sbit  LCD_B2  = LCD_BUS^2;  //D2 -- Pin  9
  19          sbit  LCD_B1  = LCD_BUS^1;  //D1 -- Pin  8
  20          sbit  LCD_B0  = LCD_BUS^0;  //D0 -- Pin  7
  21          
  22          sbit  LCD_ENA = P1^2; //Pin 6
  23          sbit  LCD_RW  = P1^1; //Pin 5 //LCD_RS   R/W   DB7--DB0        FOUNCTION
  24          sbit  LCD_RS  = P1^0; //Pin 4 //  0   0   INPUT      write the command to LCD model
  25                          //  0   1     OUTPUT     read BF and AC pointer from LCD model
  26                          //  1   0     INPUT      write the data to LCD  model
  27                          //  1   1     OUTPUT     read the data from LCD model
  28          
  29          /******************************************************************************
  30                           HD44780U    LCD_MODUL DRIVE PROGRAMME
  31          *******************************************************************************
  32          
  33          total 2 lines, 16x2= 32
  34          first line address:  0~15
  35          second line address: 64~79
  36          
  37          total 2 lines, 20x2= 40
  38          first line address:  0~19
  39          second line address: 64~83
  40          
  41          total 2 lines, 40x2= 80
  42          first line address:  0~39
  43          second line address: 64~103
  44          */
  45          
  46          #define C_CLEAR     0x01    //clear LCD
  47          #define C_HOME      0x02    //cursor go home
  48          #define C_CUR_L     0x04    //cursor shift left after input
  49          #define C_RIGHT     0x05    //picture shift right after input
  50          #define C_CUR_R     0x06    //cursor shift right after input
  51          #define C_LEFT      0x07    //picture shift left after input
  52          #define C_OFF       0x08    //turn off LCD
  53          #define C_ON        0x0C    //turn on  LCD
  54          #define C_FLASH     0x0D    //turn on  LCD, flash 
C51 COMPILER V9.57.0.0   LCD1602B                                                          05/28/2018 01:37:37 PAGE 2   

  55          #define C_CURSOR    0x0E    //turn on  LCD and cursor
  56          #define C_FLASH_ALL   0x0F    //turn on  LCD and cursor, flash
  57          #define C_CURSOR_LEFT 0x10    //single cursor shift left
  58          #define C_CURSOR_RIGHT  0x10    //single cursor shift right
  59          #define C_PICTURE_LEFT  0x10    //single picture shift left
  60          #define C_PICTURE_RIGHT 0x10    //single picture shift right
  61          #define C_BIT8      0x30    //set the data is 8 bits
  62          #define C_BIT4      0x20    //set the data is 8 bits
  63          #define C_L1DOT7    0x30    //8 bits,one line 5*7  dots
  64          #define C_L1DOT10   0x34    //8 bits,one line 5*10 dots
  65          #define C_L2DOT7    0x38    //8 bits,tow lines 5*7 dots
  66          #define C_4bitL2DOT7  0x28    //4 bits,tow lines 5*7 dots
  67          #define C_CGADDRESS0  0x40    //CGRAM address0 (addr=40H+x)
  68          #define C_DDADDRESS0  0x80    //DDRAM address0 (addr=80H+x)
  69          
  70          
  71          #define LCD_DelayNop()  NOP(20)
  72          
  73          #define   LCD_BusData(dat)  LCD_BUS = dat
  74          
  75          
  76          void  CheckBusy(void)
  77          {
  78   1        u16 i;
  79   1        for(i=0; i<5000; i++) {if(!LCD_B7)  break;}   //check the LCD busy or not. With time out
  80   1      //  while(LCD_B7);      //check the LCD busy or not. Without time out
  81   1      }
  82          
  83          /**********************************************/
  84          void IniSendCMD(u8 cmd)   //write the command to LCD
  85          {
  86   1        LCD_RW = 0;
  87   1        LCD_BusData(cmd);
  88   1        LCD_DelayNop();
  89   1        LCD_ENA = 1;
  90   1        LCD_DelayNop();
  91   1        LCD_ENA = 0;
  92   1        LCD_BusData(0xff);
  93   1      }
  94          
  95          /**********************************************/
  96          void Write_CMD(u8 cmd)    //write the command to LCD
  97          {
  98   1        LCD_RS  = 0;
  99   1        LCD_RW = 1;
 100   1        LCD_BusData(0xff);
 101   1        LCD_DelayNop();
 102   1        LCD_ENA = 1;
 103   1        CheckBusy();      //check the LCD busy or not.
 104   1        LCD_ENA = 0;
 105   1        LCD_RW = 0;
 106   1        
 107   1        LCD_BusData(cmd);
 108   1        LCD_DelayNop();
 109   1        LCD_ENA = 1;
 110   1        LCD_DelayNop();
 111   1        LCD_ENA = 0;
 112   1        LCD_BusData(0xff);
 113   1      }
 114          
 115          /**********************************************/
 116          void Write_DIS_Data(u8 dat)   //write the display data to LCD
C51 COMPILER V9.57.0.0   LCD1602B                                                          05/28/2018 01:37:37 PAGE 3   

 117          {
 118   1        LCD_RS = 0;
 119   1        LCD_RW = 1;
 120   1      
 121   1        LCD_BusData(0xff);
 122   1        LCD_DelayNop();
 123   1        LCD_ENA = 1;
 124   1        CheckBusy();      //check the LCD busy or not.
 125   1        LCD_ENA = 0;
 126   1        LCD_RW = 0;
 127   1        LCD_RS  = 1;
 128   1      
 129   1        LCD_BusData(dat);
 130   1        LCD_DelayNop();
 131   1        LCD_ENA = 1;
 132   1        LCD_DelayNop();
 133   1        LCD_ENA = 0;
 134   1        LCD_BusData(0xff);
 135   1      }
 136          
 137          
 138          /*********  初始化函数 **************************/
 139          void Initialize_LCD(void)   //intilize LCD, input none, output none
 140          {
 141   1        LCD_ENA = 0;
 142   1        LCD_RS  = 0;
 143   1        LCD_RW = 0;
 144   1      
 145   1        delay_ms(100);
 146   1        IniSendCMD(C_BIT8);   //set the data is 8 bits
 147   1      
 148   1        delay_ms(10);
 149   1        IniSendCMD(C_BIT8);   //set the data is 8 bits
 150   1      
 151   1        delay_ms(10);
 152   1        IniSendCMD(C_L2DOT7);   //tow lines 5*7 dots
 153   1      
 154   1        delay_ms(6);
 155   1        Write_CMD(C_CLEAR);   //clear LCD RAM
 156   1        Write_CMD(C_CUR_R);   //Curror Shift Right
 157   1      //  Write_CMD(C_FLASH_ALL); //turn on  LCD and cursor, flash
 158   1        Write_CMD(C_ON);    //turn on  LCD
 159   1      //  Write_AC(1,1);      //set the AC pointer
 160   1      }
 161          
 162          
 163          /**********************************************/
 164          void Write_AC(u8 hang,u8 lie) //write the AC Pointer address to LCD
 165          {
 166   1        if(hang == 1) Write_CMD((lie-1)  | 0x80);
 167   1        if(hang == 2) Write_CMD((lie+63) | 0x80);
 168   1      }
 169          
 170          /**********************************************/
 171          void ClearLine(u8 hang)
 172          {
 173   1        u8 i;
 174   1        if((hang == 0) || (hang > 2))   return; 
 175   1        Write_AC(hang,1); //set the AC pointer
 176   1        for(i=0; i<LineLenth; i++)  Write_DIS_Data(' ');
 177   1      }
 178          
C51 COMPILER V9.57.0.0   LCD1602B                                                          05/28/2018 01:37:37 PAGE 4   

 179          /**********************************************/
 180          void ClearBit(u8 hang,u8 lie)
 181          {
 182   1        if((hang == 0) || (hang > 2))   return;
 183   1        if((lie == 0) || (lie > 16))    return;
 184   1        Write_AC(hang,lie);
 185   1        Write_DIS_Data(' ');
 186   1      }
 187          
 188          /****************** 写一个字符，指定行、列和字符 ****************************/
 189          void  WriteChar(u8 hang,u8 lie,u8 dat)
 190          {
 191   1        if((hang == 0) || (hang > 2))   return; 
 192   1        if((lie == 0) || (lie > LineLenth)) return;
 193   1        Write_AC(hang,lie); //set the AC pointer
 194   1        Write_DIS_Data(dat);
 195   1      }
 196          
 197          /****************** 写一个字符串，指定行、列和字符串首地址 ****************************
             -/
 198          void  PutString(u8 hang,u8 lie,u8 *puts)
 199          {
 200   1        for ( ;  *puts != 0;  puts++)   //遇到停止符0结束
 201   1        {
 202   2          WriteChar(hang, lie, *puts);
 203   2          if(++lie > 20)  break;
 204   2        }
 205   1      }
 206          
 207          //******************** LCD40 Module END ***************************
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    461    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
